<?php namespace ProcessWire;

class FormBuilderProcessorRevinate extends FormBuilderProcessorAction implements Module
{

    protected $revinateFields = [
      "first_name",
      "last_name",
      "address_1",
      "address_2",
      "city",
      "state",
      "country",
      "zip",
      "phone",
      "email"
    ];

    public function textToArray($text, $numeric = false)
    {
        $value = array_map('trim', explode("\n", $text));
        if($numeric){
            return $value;
        }
        $newValue = [];
        foreach ($value as $row) {
            $pos = strpos($row, '=');
            if ($pos) {
                $key = trim(substr($row, 0, $pos));
                $value = trim(substr($row, $pos + 1));
                $newValue[$key] = $value;
            }
        }
        return $newValue;
    }

    protected function log($log_file, $content){
        if($this->get('revinate_debug')) {
            wire('log')->save($log_file,$content);
        }
    }

    public function processReady()
    {
        $this->addHookAfter('FormBuilderProcessor::processInputDone', function ($event) {
            /** @var FormBuilderProcessor $fbForm */
            $fbForm = $event->object->getFbForm();
            $form = $event->arguments(0);
            $tokens = $this->textToArray($this->get('revinate_tokens'), true);
            $fields_to_rename = $this->textToArray($this->get('revinate_rename'));

            $this->log("fb-revinate", print_r($tokens, true));
            $this->log("fb-revinate", print_r($fields_to_rename, true));

            if (!$tokens) {
                return;
            }

            $http = new WireHttp();

            $postData = array(
              'tokens'   => $tokens,
              'contacts' => []
            );

            $contactData = [];

            $email = $form->find('name=email|email_address')->first()->value;

            if ($email) {
                $contactData['email'] = $email;
            }

            // add existing field values that match the revinate fields
            foreach ($form->children as $child) {
                if ($child->className == "InputfieldSubmit") {
                    continue;
                }
                if (in_array($child->name, $this->revinateFields)) {
                    $contactData[$child->name] = $child->val();
                }
            }

            // rename fields
            foreach ($fields_to_rename as $revinate_name => $form_field_name) {
                $field_value = $form->getChildByName($form_field_name)->value;
                if ($field_value) {
                    $contactData[$revinate_name] = $field_value;
                }
            }

            // exit if no email is set since it's required
            if(!$contactData['email']) return;

            $postData['contacts'][] = $contactData;
            $postData = json_encode($postData, JSON_UNESCAPED_SLASHES);
            $this->log("fb-revinate", print_r($postData, true));

            try {
                $http = new WireHttp();
                $http->setHeader("Content-Type", "text/plain");
                $response = $http->post(
                  "https://contact-api.inguest.com/api/add-contacts-to-lists",
                  $postData
                );
                $this->log("fb-revinate", "Response:" . print_r($response, true));
            } catch (Exception $e) {
                $this->log("fb-revinate", "Error:" . $e);
            }
            $c = $http->getHttpCode();
            if ($c != 200) {
                $this->log('fb-revinate', "Error in forms endpoint.");
            }
        });
    }

    public function getConfigInputfields(InputfieldWrapper $inputfields)
    {

        $f = $this->modules->get('InputfieldTextarea');
        $f->attr('name', 'revinate_tokens');
        $f->label = 'Enter one list token per line';
        $f->val($this->get('revinate_tokens'));
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldTextarea');
        $f->attr('name', 'revinate_rename');
        $f->label = 'Rename fields';
        $f->notes = "Available fields are: email (REQUIRED), first_name ,last_name ,address_1 ,address_2 ,city ,state ,country ,zip ,phone";
        $f->description = 'Match fields to valid Revinate fields, enter one per line below in the format: [revinate_name]=[form_field]';
        $f->val($this->get('revinate_rename'));
        $inputfields->add($f);

        $f = $this->modules->get('Inputfieldcheckbox');
        $f->attr('name', 'revinate_debug');
        $f->label = 'Debug?';
        $f->val($this->get('revinate_debug'));
        $f->checked = $this->get('revinate_debug');
        $inputfields->add($f);

    }
}
